<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:annotation-config/>
	<context:component-scan base-package="com.gms.gmsdao"/>
	<context:component-scan base-package="com.gsm.gsmservice"/>
	
	
	<context:property-placeholder location="classpath:database.properties"/>
	
	<!-- Database connection setting -->
	<!-- Simple implementation of the standard JDBC DataSource interface, 
        configuring the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${db.driverClassName}"/>
		<property name="url" value="jdbc:mysql://localhost:3306/gmsdb"/>
		<property name="username" value="root"/>
		<property name="password" value="shri@0807"/>
	</bean>
	
	<!-- Session Factory -->
	 <!-- This produces a container-managed EntityManagerFactory; 
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		
		 <!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="com.gms.gmsdao.entities"/>
		
		  <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
           Exposes Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
		</property>
		
		<property name="jpaProperties">
	        <props>
	            <!-- <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop> -->
	            <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
	             <prop key="hibernate.hbm2ddl.auto">none</prop>
	             <prop key="hibernate.show_sql">true</prop>
	             <prop key="hibernate.format_sql">true</prop>
	        </props>
    	</property>
	</bean>
	
	
	<!-- Configure Transaction Manager -->
	<!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
        JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
	
	 <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
	<tx:annotation-driven/>
	
	
</beans>
